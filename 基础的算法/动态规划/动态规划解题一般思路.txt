1将原问题分解为子问题
1）把原问题分解为若干个子问题，子问题和原问题的形式相同或类似，只不过规模变小了。
子问题都解决，原问题即解决（数字三角形例）
2）子问题的解一旦就出就会被保存，所以那个子问题只需求解一次。

2确定状态
在用动态规划解题时，我们往往将和子问题相关的各个变量的一组取值，称之为一个“状态”。
一个“状态”对应于一个或多个子问题，所谓某个状态下的“值”，即使这个“状态”所对应大的子问题的解。

整个问题的时间复杂度是状态数目乘以计算每个状态所需要的时间。

在数字三角形里每个“状态”只需要经过一次，且在每个状态上计算所化的时间都是和N无关的常数。

用动态规划解体，经常碰到的情况是，K个整形变量能构成一个状态（如数字三角形中的行号和列号这两个变量构成一个状态）。
如果这K个整形变量的取值范围分别是N1,N2,N3.....Nk,那么，我们就可以用一个K维的数组array[n1][n2].....[nk]来储存各个状态的值。
这个“值”未必就是一个整数或浮点数，可能是需要一个数据结构才能表示的，那么array就可以是一个结构数组。
一个“状态”下的“值”通常会是一个或多个子问题的解。  

3确定一些初始状态（边界状态）的值
以“数字三角形”为例，初始状态就是底边数字，值就是底边数字值。

4确定状态转移方程

定义出什么是“状态”，以及在该“状态”的“值”后，就要找出不同的状态之间如何迁移―
―即如何从一个或多个“值”已知的状态，求出另一个“状态”的“值”（递推型）。状态的迁移可以用递推公式表示，
次递推公式也可以被称作“状态转移方程”。