#include<iostream>
#include<cstring>
#include<algorithm>
using namespace std;
char sz1[1000];
char sz2[1000];
int maxLen[1000][1000];
//求两个字符串的最长公共子序列
//maxLen(i,j)表示状态，表示到第一个串中的第i个字符和第二个串中第j个字符形成的最大公共子序列的长度
//边界状态maxLen(n,0)和maxLen(0,n),都为零
//递推公式：if(s1[i-1]==s2[j-1]) maxLen(i,j)=maxLen(i-1,j-1)+1
// else maxLen(i,j)=max(maxLen(i,j-1),maxLen(i-1.j))
int main()
{
	while (cin >> sz1 >> sz2)
	{
		cout << sz1;
		cout << sz2;
		int length1 = strlen(sz1);
		int length2 = strlen(sz2);
		int nTmp;
		int i, j;
		for (i = 0; i <= length1; i++)
		{
			maxLen[i][0] = 0;
		}
		for (j = 0; j <= length2; j++)
		{
			maxLen[0][j] = 0;
		}

		for (i = 1; i <= length1; i++)
		{
			for (j = 1; j <= length2; j++)
			{
				if (sz1[i - 1] == sz2[j - 1])
				{
					maxLen[i][j] = maxLen[i - 1][j - 1]+1;
					//cout << maxLen[i][j];
				}
				else
				{
					maxLen[i][j] = max(maxLen[i][j - 1], maxLen[i - 1][j]);
					//cout << maxLen[i][j];
				}
			}

		}
		cout << maxLen[length1][length2] << endl;

	}
	return 0;
}
