#include<iostream>
using namespace std;

int (*cal(int A[30][30], int B[30][30], int n))[30]      //计算两个n阶矩阵的乘积 返回的是二维数组的地址
{
	int(*C)[30] = new int[30][30];
	for (int i = 0; i < n; i++)
	{
		for (int j = 0; j < n; j++)
		{
			for (int a = 0; a < n; a++)
			{
				C[i][j] += A[i][a] * B[a][j];
			}
		}
	}
	
	return C;
}

void out(int A[30][30], int n)
{
	for (int i = 0; i < n; i++)
	{
		for (int j = 0; j < n; j++)
		{
			cout << A[i][j] << " ";
		}
		cout << endl;
	}
}
void copy(int(*A)[30], int(*B)[30],int n)
{
	for (int i = 0; i < n; i++)
	{
		for (int j = 0; j < n; j++)
		{
			A[i][j] = B[i][j];
		}
	}
}

int main()
{
	int(*A)[30] = new int[30][30];
	int(*B)[30] = new int[30][30];
	int(*temp)[30] = new int[30][30];
	int n;
	cin >> n;         //输入矩阵的阶
	int m;
	cin >> m;          //输入要运算的次幂
	
	for (int i = 0; i < n; i++)
	{
		for (int j = 0; j < n; j++)
		{
			cin >> A[i][j];
			B[i][j] = A[i][j];

		}
	}

	for (int i = 0; i < m; i++)
	{
		if (m == 1)
		{
			out(A, n);
			return 0;
		}
		temp = cal(B, A, n);
		if (m - i == 2)
		{
			temp=cal(B, A, n);
			out(temp, n);
			copy(B, temp, n);

		}
	}
	out(B, n);
	return 0;

}