#include<iostream>
using namespace std;
//int F[] = { 0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55 };
int F(int n) {      //斐波那契数列的递归实现方法
	if(n==1||n==2){
		return F(n - 1) + F(n - 2);
	}
}
int FinonacciSearch(int *a, int n, int key)   //a是要查找的整型数组，n是数组元素的个数，key是要查找的值
{
	int low, high, mid, i, k;
	low = 1;			//定义最低下标为记录首位
	high = n;				//定义最高下标为记录末尾
	k = 0;
	while (n > F(k) - 1) {               //计算n位于斐波那契数列的位置
		k++;
	}
	for (i = n; i < F(k) - 1; i++) {       //将不满的数值补全
		a[i] = a[n];
	}

	while (low <= high)
	{
		mid = low + F(k - 1) - 1;          //计算当前分隔的下标
		if (key < a[mid]) {					//查找记录小于当前的分隔记录
			high = mid - 1;
			k = k - 1;
		}
		else if (key>a[mid]) {				//查找记录大于当前的分隔记录
			low = mid + 1;
			k = k - 2;
		}
		else {                           //若相等
			if (mid <= n) {
				return mid;
			}
			else {
				return n;
			}
		}
		return 0;
	}






}